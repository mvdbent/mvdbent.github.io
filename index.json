[{"content":" Our Second in-person Hybrid Dutch Mac Admins Meetup was hosted by Xebia, they have enough space and the facilities to host this meeting both on location and remote (hybrid), this allows everyone to join where they feel comfortable.\nMarlon Soekhar, Manager IT by Xebia, kickof the evening and told us what his team does and told us more about Xebia, who they are and what they do.\nIntroduces the new App Catalog by Root3 The first presentation was held by Jordy Witteman, Apple Principal Consultant by Root3. He introduced the new App Catalog service which Root3 build for there customers.\nExplained that installing, updating and maintaining macOS-apps can be challenging for less experienced administrators or those unfamiliar with macOS management. Or when organisations is using a more limited MDM solution like Microsoft Intune.\nBad things come in large packages by Computest Next up, I would like to introduce you all to Thijs Alkemade, a Security Researcher at Computest\u0026rsquo;s Sector 7 division. With his expertise in mathematics and computer science, he has successfully demonstrated zero-day attacks on various systems and environments, including macOS, iOS, and even Zoom.\nThijs has received accolades for his skills, including winning the prestigious Pwn2Own competition twice. I hope you enjoy his talk and learn about his fascinating work in advanced security research.\nLast year, along with his colleague Daan, he presented an awesome presentation at Objective at Sea in Barcelona. If you haven\u0026rsquo;t seen it yet, it\u0026rsquo;s a must-see.\nResources Root3 - App Catalog\nRoot3 - macOS Support App\nSector 7 - the research division from Computest\nOBTS v5.0 - Breaking all macOS Sec Layers with a Single Vulnerability\n","permalink":"https://appleshare.it/posts/dutch-mac-admins-xebia/","summary":"Our Second in-person Hybrid Dutch Mac Admins Meetup was hosted by Xebia, they have enough space and the facilities to host this meeting both on location and remote (hybrid), this allows everyone to join where they feel comfortable.\nMarlon Soekhar, Manager IT by Xebia, kickof the evening and told us what his team does and told us more about Xebia, who they are and what they do.\nIntroduces the new App Catalog by Root3 The first presentation was held by Jordy Witteman, Apple Principal Consultant by Root3.","title":"Dutch Mac Admins Meetup at Xebia"},{"content":" Learn about a better, faster and easier way to report and remediate CIS Benchmarks. We will introduce a new reporting script, with optional remediation. This script is designed for Big Sur and Monterey and has flexible deployment options for Jamf Pro.\nResources Jamf Blog\nCIS-Script Blog\nCIS-Script GitHub\nCenter for Internet Security, Inc. (CIS®)\nmacOS Security Compliance Project\nJamf Compliance Editor\n","permalink":"https://appleshare.it/posts/automating-cis-benchmark/","summary":"Learn about a better, faster and easier way to report and remediate CIS Benchmarks. We will introduce a new reporting script, with optional remediation. This script is designed for Big Sur and Monterey and has flexible deployment options for Jamf Pro.\nResources Jamf Blog\nCIS-Script Blog\nCIS-Script GitHub\nCenter for Internet Security, Inc. (CIS®)\nmacOS Security Compliance Project\nJamf Compliance Editor","title":"Automating CIS Benchmark Reporting and Remediation"},{"content":" After a long periode, we finally organized a in-person Hybrid Dutch Mac Admins Meetup. It was great to see everyone\nMac Device Managament @ Adyen We started with Adyen, the team told us about who they are and how they Onboard and migrate their Mac estate within their environment and share their challenges and how they resolve them.\nThe Mac Admins Foundation The second presentation is about the Mac Admins Foundation, we had the founders presenting the foundation! Thank you, Emily, Tom, Chris, Rich and Caleb, for giving us a remote presentation all the way from the US. For some of you, it\u0026rsquo;s quite early, so my respect for showing up for us!\nResources Mac Admins Foundation\nMac Admins Foundation Swag Store\nMac Admins Foundation Donations\n","permalink":"https://appleshare.it/posts/dutch-mac-admins-adyen/","summary":"After a long periode, we finally organized a in-person Hybrid Dutch Mac Admins Meetup. It was great to see everyone\nMac Device Managament @ Adyen We started with Adyen, the team told us about who they are and how they Onboard and migrate their Mac estate within their environment and share their challenges and how they resolve them.\nThe Mac Admins Foundation The second presentation is about the Mac Admins Foundation, we had the founders presenting the foundation!","title":"Dutch Mac Admins Meetup at Adyen"},{"content":"Jamf Nation Live is back after a two-year hiatus! We kicked off the 2022 tour in London-style at the Great Gallery in Tobacco Dock. We had a great time and presented at all locations. Check out the videos below for an impression of JNL22, and we hope to see you next year!\nJamf Nation Live - London Jamf Nation Live - Amsterdam Jamf Nation Live - Paris Jamf Nation Live - München Resources Jamf Blog ","permalink":"https://appleshare.it/posts/jnl22/","summary":"Jamf Nation Live is back after a two-year hiatus! We kicked off the 2022 tour in London-style at the Great Gallery in Tobacco Dock. We had a great time and presented at all locations. Check out the videos below for an impression of JNL22, and we hope to see you next year!\nJamf Nation Live - London Jamf Nation Live - Amsterdam Jamf Nation Live - Paris Jamf Nation Live - München Resources Jamf Blog ","title":"Jamf Nation Live 2022"},{"content":" Now that dockutil has been rewritten in Swift for macOS 12.3 compatibility, I needed to dust off my scripts. dockutil is supporting macOS 11 Big Sur or higher.\nDon\u0026rsquo;t forget to look at the USAGE section in the readme or use the --help option to read more about the usage and options.\nLuckily, not much is needed to be dusted off. However, I wanted to add some adjustments and share my workflows which you can use within Jamf. To support the older versions of macOS and dockutil, I kept my first setDock scripts and renamed this one to setDock-legacy this is for supporting before macOS 11.\nThere are many ways to manage the dock of an end-user. You can completely manage, semi manage or just add items to the dock. Whatever fits your needs, I prefer to leave the dock fully in control of the end-user so we just add items to the dock or create a basic dock to get the end-user started during enrollment\nWhat we need Download the scripts that is used and discussed in this blogpost from my GitHub repo. The latest release of dockutil (minimum version 3.0.0) the latest release can be found here on the GitHub repo. Clients must be macOS 11 Big Sur or higher (otherwise use older dockutil workflows) and for deploying to the devices we are using Jamf Pro. The script should be easy to use with other management systems.\nWe can deploy dockutil by uploading the dockutil installer PKG into the jamf Pro Server Settings -\u0026gt; Computer Management -\u0026gt; Packages\nAnother option is to use Installomator, but you need to add this label to the Installomator script if you are on version 9.0.1 or earlier. (It should be added in the next version.)\ndockutil) name=\u0026#34;dockutil\u0026#34; type=\u0026#34;pkg\u0026#34; packageID=\u0026#34;dockutil.cli.tool\u0026#34; downloadURL=$(downloadURLFromGit \u0026#34;kcrawford\u0026#34; \u0026#34;dockutil\u0026#34;) appNewVersion=$(versionFromGit \u0026#34;kcrawford\u0026#34; \u0026#34;dockutil\u0026#34;) expectedTeamID=\u0026#34;Z5J8CJBUWC\u0026#34; blockingProcesses=( NONE ) ;; Create a new policy, choose the preferred trigger, set the preferred frequency, add the dockutil.pkg or use the installomator script and don’t forget to scope to the Target Devices.\nBasics Now we have dockutil deployed we can start working on the scripts to set a default dock for your environment. Keep in mind, while testing you can easily reset the dock by deleting the current user\u0026rsquo;s com.apple.dock.plist file from the preferences.\nrunAsUser defaults delete com.apple.dock runAsUser killall cfprefsd killall Dock If we look at the usage of dockutil it’s straightforward. To add an application to the dock, just run this command\ndockutil --add /System/Applications/TextEdit.app This will add TextEdit to the end of the dock. This is a great example because I want to highlight something. If you look into your Applications folder, you will see the TextEdit application.\ndockutil doesn’t check if the application exists on the device, and will be added as a Question mark in the dock. To solve this you can create a function that will check if the application exists before he will run the command.\nThere are many options that you can use with dockutil, however, we are only using the options --add, --position, --no-restart and specify the path to the plist.\nThis is also the reason why I like dockutil, it is straightforward, I want to add x to the dock at this position, done!\nThe no-restart function is to prevent restarting the dock for each change. When you are not ready with the configuration, it makes no sense to restart the dock after every dockutil command.\nThe last important thing to know is if you run dockutil it runs in the userspace of that specific user. For example, if you run a script from Jamf you are creating a dock for the root user.\nMake sure that you run the script with the logged-in user.\nBuild your default dock Now we understand the basics for adding applications to the dock, let’s start building your organisation’s default dock.\nIf you look at the setDock-defaultDock.sh script from top to bottom, first we Collect important user information, have a function so we can run dockutil as currently logged in user, we check if dockutil is installed and version.\nBefore we set the dock we first empty it by running the following command:\nrunAsUser \u0026#34;${dockutil}\u0026#34; --remove all --no-restart I learned not to repeat code in code when you don’t need to. (trying to keep this in mind and yes I sometimes forget) To add the Applications to the dock, I’m using a loop to run the dockutil —add command.\nTherefore we need to make an Application path array from the apps we want to add to the default dock like below:\napps=( \u0026#34;/Applications/Self Service.app\u0026#34; \u0026#34;/System/Applications/Launchpad.app\u0026#34; \u0026#34;/Applications/zoom.us.app\u0026#34; \u0026#34;/Applications/Google Chrome.app\u0026#34; \u0026#34;/Applications/.... etc.\u0026#34; ) This array is used in the command we used in the loop\nrunAsUser \u0026#34;${dockutil}\u0026#34; --add \u0026#34;$app\u0026#34; --no-restart The array will start adding icons from the left side of the dock to the right. (top to bottom = left to right)\nIt doesn\u0026rsquo;t matter if you start with the files and folders or Applications but I like it to make a logical order.\nBefore adding the application to the dock we are verifying if the application is available on that given path: if [[ -e ${app} ]]\nBy doing this, we don’t end up with question marks as icons in the dock. (I know if you install the app later, this will be resolved. but i don’t like to confuse the end-user with a question mark)\nNow we have created the applications array, we can add a command to add “Files or Folders” (this can also include links to servers) to the dock. For adding “Files or Folders” we can configure how we want to present them, in the script we run the following command:\nrunAsUser \u0026#34;${dockutil}\u0026#34; --add ${userHome}/Downloads --view list --display stack --sort dateadded --no-restart With this command we add the Downloads folder to the dock with the icon displayed as a Stack, Content view as List and Sorted by Date Added. You can also add links to specific servers or even VNC connections to the dock by adding the smb://address or vnc://address with --label like the example below.\nrunAsUser \u0026#34;${dockutil}\u0026#34; --add [smb://fileserver.company.com](smb://fileserver.company.com) --label \u0026#39;fileserver\u0026#39; --no-restart Optional: you can change other settings of the dock as well in this script for example \u0026ldquo;Disable show recent\u0026rdquo; by adding this command to the script:\nrunAsUser defaults write com.apple.dock show-recents -bool FALSE The last part we need to do to make sure the dock new configuration is loaded is to restart the dock by running this command: killall -KILL Dock\nNow you know how the script works, we can create a new policy, choose the preferred trigger, set the preferred frequency, add the setDock-defaultDock.sh to the policy and don’t forget to scope to the Target Devices.\nYou can add this policy into your enrollment workflow to have a default company dock when the device is enrolled.\nAnd thats basically it, by now you understand why I like dockutil ¯\\_(ツ)_/¯\nHow to use a dockutil script with variables in Jamf. I’m using dockutil over the build-in solution from the Jamf Pro Server, is because with dockutil we have more options. And to simplify this I created a script that can be re-used.\nUpload the setDock-addToDock.sh into you Jamf Pro Server Settings -\u0026gt; Computer Management -\u0026gt; Scripts make sure you fill in the Parameter Labels by options:\nParameter 4 = -- Required -- Application, Files or Folder Path ( /System/Applications/TextEdit.app ) Parameter 5 = Position ( index_number - beginning - end - middle ) Parameter 6 = View ( grid - fan - list - auto ) Parameter 7 = Display ( folder - stack ) Parameter 8 = Sort ( name - dateadded - datemodified - datecreated - kind ) This will help you to remember the options you can use while setting up the policy. The only required value is the Application, Files or Folder Path the rest is optional.\nCreate a new policy or add to an existing policy, go to the payload Scripts, add script setDock-addToDock.sh If you install the application you wan to add to the dock in the same policy, set Priority to After. Fill in the Parameter Values you want to add and set, and don’t forget to scope to the Target Devices.\nThats it! The script will check before adding the Application, Files or Folder to the dock we are verifying if the path is correct. You can go to the Policy -\u0026gt; Logs to see the result of and what the error is if the policy didn\u0026rsquo;t work.\nHope you have a better understanding of how to use dockutil with a script to setup a default dock or to add a single item to the dock where ever you want.\nResources github.com/kcrawford/dockutil\ngithub.com/mvdbent/setDock\n","permalink":"https://appleshare.it/posts/use-dockutil-in-a-script/","summary":"Now that dockutil has been rewritten in Swift for macOS 12.3 compatibility, I needed to dust off my scripts. dockutil is supporting macOS 11 Big Sur or higher.\nDon\u0026rsquo;t forget to look at the USAGE section in the readme or use the --help option to read more about the usage and options.\nLuckily, not much is needed to be dusted off. However, I wanted to add some adjustments and share my workflows which you can use within Jamf.","title":"How to use dockutil in a script"},{"content":" I am so honoured to present at the online Mac Sys Admin this year.\nThis presentation is about: Automating CIS Benchmark with reporting and remediation.\nLearn about a better, faster, and easier way to report and remediate CIS Benchmarks. We will introduce a new reporting script, with optional remediation. This script is designed for Big Sur and Monterey and has flexible deployment options for Jamf Pro.\nPresentation Video\nSlides\nCIS-Script Blogpost\nCIS-Script GitHub\nResources Jamf Marketplace\nApple Platform Security\nCenter for Internet Security, Inc. (CIS®)\nmacOS Security Compliance Project\nCIS macOS Security Compliance Project\nGithub Jamf - CIS for macOS Catalina - Script and Configuration Profile Remediation\nOther Enjoy all of the other awesome presentations, and hopefully we can do this next year in person!\nAll MacSysAdmin Online 2021 sessions Stay safe everyone! ","permalink":"https://appleshare.it/posts/macsysadminscis/","summary":"I am so honoured to present at the online Mac Sys Admin this year.\nThis presentation is about: Automating CIS Benchmark with reporting and remediation.\nLearn about a better, faster, and easier way to report and remediate CIS Benchmarks. We will introduce a new reporting script, with optional remediation. This script is designed for Big Sur and Monterey and has flexible deployment options for Jamf Pro.\nPresentation Video\nSlides","title":"Automating CIS Benchmark Reporting and Remediation | MacSysAdmin 2021"},{"content":" This CIS Script is build to report and remediate based on the your organisation score.\nWhile working with CIS Benchmarks (Remediation Scripts and/or Configuration Profiles) I felt this could be done better, faster and easier. The guys from the macOS Security Compliance Project did an amazing job automating the guidance and configuration profiles.\nI created custom rules set for CIS Benchmark to integrate with the macOS Security Compliance Project and published CIS-macOS-Security.\nWhile working with CIS Benchmark, Script and Configuration Profile, I had the feeling there was missing a overview with compleet reporting, and there for build a read only CIS-Reporting script you can find here\nEnded up with seperate tools, creation of the Documention, Configuration Profiles and Reporting. However I still needed an extra script for remediation.\nTo resolve this I combined the reporting script with remediation with the option to enable remediation or not.\nAnd we need to keep in mind that every year we get a new macOS release and like macOS, Security is a moving target. Basically things change, and we don\u0026rsquo;t want to edit and maintain an 3000 line script. This will be hard to maintain if a new macOS has released.\nFor that reason, and for easy maintaining, the CIS-Script is assembled out of a bunch of fragments.\nHere structure of the CIS Script folder, in the root of the folder, there is a symbolic link to the assemble script. The original is in the Utils folder, with some other script you can use. All script that you assamble/create will be stored in the Build folder. For implementation into the jamf pro server there are some resources in the Jamf Folder.\nIn the Fragments folder. Here you will have the Header.sh, Footer.sh and Version.sh files with all the logic and functions that will be assembled into the script. In the OrgScore Folder are all the separate CIS Benchmark OrgScore*.sh. Every CIS Benchmark orgScore you can test separately if you need to trouble shoot or extend it with the new macOS.\nCIS Benchmark OrgScore Let\u0026rsquo;s have a look how the CIS Benchmark OrgScore, looks like.\n#!/bin/zsh script_dir=$(dirname ${0:A}) projectfolder=$(dirname $script_dir) source ${projectfolder}/Header.sh CISLevel=\u0026#34;1\u0026#34; audit=\u0026#34;2.1.1 Turn off Bluetooth, if no paired devices exist (Automated)\u0026#34; orgScore=\u0026#34;OrgScore2_1_1\u0026#34; emptyVariables # Verify organizational score runAudit # If organizational score is 1 or true, check status of client if [[ \u0026#34;${auditResult}\u0026#34; == \u0026#34;1\u0026#34; ]]; then method=\u0026#34;Script\u0026#34; remediate=\u0026#34;Script - defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false\u0026#34; connectable=$(system_profiler SPBluetoothDataType 2\u0026gt;\u0026amp;1 | grep -c \u0026#34;Paired: Yes\u0026#34;) bluetoothEnabled=$(defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool) comment=\u0026#34;Paired Devices: ${connectable}\u0026#34; # if [[ \u0026#34;$connectable\u0026#34; == 0 ]] \u0026amp;\u0026amp; [[ \u0026#34;$bluetoothEnabled\u0026#34; == 0 ]]; then if [[ \u0026#34;$connectable\u0026#34; -gt 0 ]] \u0026amp;\u0026amp; [[ \u0026#34;$bluetoothEnabled\u0026#34; == 1 ]] || [[ \u0026#34;$connectable\u0026#34; == 0 ]] \u0026amp;\u0026amp; [[ \u0026#34;$bluetoothEnabled\u0026#34; == 0 ]]; then result=\u0026#34;Passed\u0026#34; else result=\u0026#34;Failed\u0026#34; comment=\u0026#34;No Paired Devices” # Remediation if [[ \u0026#34;${remediateResult}\u0026#34; == \u0026#34;enabled\u0026#34; ]]; then defaults write /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool false killall -HUP bluetoothd # re-check connectable=$(system_profiler SPBluetoothDataType 2\u0026gt;\u0026amp;1 | grep -c \u0026#34;Paired: Yes\u0026#34;) bluetoothEnabled=$(defaults read /Library/Preferences/com.apple.Bluetooth ControllerPowerState -bool) if [[ \u0026#34;$connectable\u0026#34; == 0 ]] \u0026amp;\u0026amp; [[ \u0026#34;$bluetoothEnabled\u0026#34; == 0 ]]; then result=\u0026#34;Passed After Remediation\u0026#34; else result=\u0026#34;Failed After Remediation\u0026#34; fi fi fi fi printReport We runAudit to verify the organizational score. If scored we perform an audit to check the state. Then Check if remediateResult is enabled, and if enabled we remediate, we perform an audit to check if remediation succeeded and report back so we can read this out in report\nTo some up what the org score is doing, is Audit, Remediate and report.\nFor adjustments or testing, you can run every OrgScore seperatly.\n$ cd /Git/CIS-Script/Fragments/OrgScores $ sudo ./OrgScore*.sh Custom CIS Benchmark OrgScore You can make your own custom OrgScore, which you can include into the CIS-Script. Make sure that the name of the file is the same as the OrgScore within the script.\nPlace your custom OrgScore in the Framework/OrgScore folder.\nAssemble Remediation Script To assemble all the fragements together in a full Script CISBenchmarkScript.sh which you can use standalone or via an MDM server (like Jamf Pro) you can use the Assemble.sh script.\nThe Assemble.sh will default build the full Remediation Script CISBenchmarkScript.sh.\n$ ./Assemble.sh You can create seperate script by running the script with -s [\u0026ndash;separate] option\n$ ./Assemble.sh -s With the following command ./Assemble.sh -h you can read about the options.\nThe following options are available: -j --json Builds Jamf Pro Custom Schema.json file -s --separate Builds separate CIS Benchmark Script from the fragements -h --help Displays this message or details on a specific verb EXAMPLES ./Assemble.sh Builds CIS Benchmark Script from the fragements ./Assemble.sh -j Builds Jamf Pro Custom Schema.json file ./Assemble.sh -s Builds separate CIS Benchmark Script from the fragements The Assemble.sh script will built the full script in ./Build/ and the seperate scripts in ./Build/Scripts/ folder.\nCIS Benchmark Script The CISBenchmarkScript.sh Script can be run as a local standalone script, and will preform a read only audit which creates a full report. Location of the report /Library/Security/Reports/\n$ sudo ./CISBenchmarkScript.sh You can create a Full Report by running the script with -f [\u0026ndash;fullreport] option\n$ sudo ./CISBenchmarkScript.sh -f You can enable remediation by running the script with -r [\u0026ndash;remediate] option\n$ sudo ./CISBenchmarkScript.sh -r With the following command ./Build/CISBenchmarkScript.sh -h you can read about the options.\nThe following options are available: -f\t--fullreport\tPrint Full Report -h\t--help\tDisplays this message or details on a specific verb -r\t--remediate\tEnable Remediation EXAMPLES ./CISBenchmarkScript.sh -f Run script to print Full Report ./CISBenchmarkScript.sh -r Run script with Remediation enabled ./CISBenchmarkScript.sh -rf Run script with Remediation enabled and print Full Report Implementation Jamf Pro Server Upload the assembled CISBenchmarkScript.sh Script into the Jamf Pro Server.\nUpload the Extension Atrributes into you Jamf Pro Server. Location Extension Atrributes\nCIS Benchmark Settings Configuration Profile If you use the script via a Jamf Pro you can set the script to create a short or full report, and enable or disable remediation. By using a mobile config we can control and set the organisation scoring and CIS script settings.\nFor easy creation of the CIS script Configure profile, you can use the Assemble.sh script with -j [\u0026ndash;json] option to generate an JSON Schema manifests from all the fragments in OrgScores folder (including custom OrgScores).\n$ sudo ./CISBenchmarkScript.sh -j Create a new computer configuration profile, give the profile a name and add the policy to a categorie, within the Application \u0026amp; Custom Settings payload, upload the just generated Custom Schema.json file, make sure that you check if you upload the just created file, Fill in the preference domain.\nNow you can configure what you need the CIS script to do, full or short report, remediation enabled or not, and go through the list and enable/disable the org scores where you need to score on.\nAfter we uploaded the CIS scripts, Configuration profile and Extension Attribute into the Jamf Pro Server, the last thing we need to do is, to create a policy. Create a new policy, choose the preferred trigger, set the preferred frequency, add the CIS Script and don’t forget to scope.\nAfter you scoped the CIS script Configure profile and the Policy with the script to the Target Devices.\nYou are ready to get compliant and know the state of your devices Resources github.com/mvdbent/CIS-Script\n","permalink":"https://appleshare.it/posts/cis-script/","summary":"This CIS Script is build to report and remediate based on the your organisation score.\nWhile working with CIS Benchmarks (Remediation Scripts and/or Configuration Profiles) I felt this could be done better, faster and easier. The guys from the macOS Security Compliance Project did an amazing job automating the guidance and configuration profiles.\nI created custom rules set for CIS Benchmark to integrate with the macOS Security Compliance Project and published CIS-macOS-Security.","title":"CIS-Script"},{"content":" While working with CIS Benchmarks PDF (guidelines for scripts and/or Configuration Profiles) I felt there must be a better and faster way. The guys from the macOS Security Compliance Project did an amazing job automating the guidance, needed scripts, configuration profiles, and remediation script.\nWhile working with CIS Benchmarks PDF (guidelines for scripts and/or Configuration Profiles) I felt there must be a better and faster way. The guys from the macOS Security Compliance Project did an amazing job automating the guidance, needed scripts, configuration profiles, and remediation script.\nSo I started to transform the CIS Benchmark PDF from Big Sur into custom rules set to integrate with the macOS Security Compliance Project. You can find the mSCP here and the CIS Benchmark custom rules set here github.com/mvdbent/CIS-macOS-Security\nUsage/Requirements The CIS Benchmark rules are tested on macOS Big Sur 11. and the latest macOS Security Compliance Project release.*\nDownload the CIS-macOS-Security to your device. Download the macOS Security Compliance Project to your device. Install the Prerequisites for the macOS Security Compliance Project, see instuctions here Copy the CIS-macOS-Security /custom/ folder into the macOS Security Compliance Project and overwrite the empty /custom/ folder. The /custom/ folder in the macOS Security Compliance Project is in the .gitignore file so you can safely update to the latest version of macOS Security Compliance Project without loosing the CIS Benchmark baselines.\nGenerate a Baseline The project provides the following baseline files, located in the /custom/baselines/ folder:\nCIS-Benchmark.yaml CIS-Benchmark-L1.yaml CIS-Benchmark-L2.yaml If you want to create your own baseline or modify an existing baseline, the generate-baseline.py found in the scripts folder will generate a {baseline}.yaml file containing all the rules corresponding with the provided tag (baseline). This {baseline}.yaml is required to run the generate-guidance.py script.\nGet a list of available tags and you will see the CIS-Benchmark tags as well\n$ macOS-Security git:(master) ./scripts/generate_baseline.py -l 800-171 800-53r4_high 800-53r4_low 800-53r4_moderate CIS-Benchmark CIS-Benchmark-L1 CIS-Benchmark-L2 cnssi-1253 inherent manual n_a none permanent stig supplemental Generate a new baseline\n$ macOS-Security git:(master) ./scripts/generate_baseline.py -k CIS-Benchmark-L1 $ macOS-Security git:(master) ls -dn build/baselines/* -rw-r--r-- 1 501 20 6350 May 10 13:30 build/baselines/CIS-Benchmark-L1.yaml The generated baseline will be saved into the build/baselines/\nGenerate CIS Benchmark guidance To generate the guidance files (AsciiDoc, HTML, PDF, Excel, mobileconfigs, and compliance script) run the generate-guidance.py script and point it to either one of the built-in baseline.yaml files or a custom CIS Benchmark baseline.yaml file in the custom/baselines folder or created by the generate-baseline.py script.\nAsciiDoc, HTML, and PDF\n$ ./scripts/generate_guidance.py custom/baselines/CIS-Benchmark.yaml **AsciiDoc, HTML, and PDF with custom logo **\n$ ./scripts/generate_guidance.py custom/baselines/CIS-Benchmark.yaml -l /Git/macOS-Security/custom/Images/cis_banner.png AsciiDoc, HTML, PDF, and Excel\n$ ./scripts/generate_guidance.py custom/baselines/CIS-Benchmark.yaml -x AsciiDoc, HTML, PDF, Excel, and mobileconfigs\n$ ./scripts/generate_guidance.py custom/baselines/CIS-Benchmark.yaml -x -p AsciiDoc, HTML, PDF, Excel, mobileconfigs, and custom logo use full-path to custom logo\n$ ./scripts/generate_guidance.py custom/baselines/CIS-Benchmark.yaml -l /Git/macOS-Security/custom/Images/cis_banner.png -p -x Hope this will help you building your custom documentation based on CIS Benchmark \u0026ldquo;Big Sur\u0026rdquo;\nResources github.com/mvdbent/CIS-Reporting\n","permalink":"https://appleshare.it/posts/cis-custom-rules-set-mscp/","summary":"While working with CIS Benchmarks PDF (guidelines for scripts and/or Configuration Profiles) I felt there must be a better and faster way. The guys from the macOS Security Compliance Project did an amazing job automating the guidance, needed scripts, configuration profiles, and remediation script.\nWhile working with CIS Benchmarks PDF (guidelines for scripts and/or Configuration Profiles) I felt there must be a better and faster way. The guys from the macOS Security Compliance Project did an amazing job automating the guidance, needed scripts, configuration profiles, and remediation script.","title":"CIS Custom Rules Set mSCP"},{"content":" It makes me very sad that the EraseInstall application has been retired.\nWe built this tool three years ago, mostly because we wanted to learn how to build an app like this on macOS. We think it worked out well. We learned a lot, and are glad the application was useful to some.\nSince then, all the people involved in the EraseInstall Project have moved on to other jobs or other responsibilities. Unfortunately, this leaves us with no time or resources to maintain or improve EraseInstall.\nThe repository and the application will remain available in its current state. There will be no more updates. If someone feels they can take up the project and continue it, please do!\nIf you are looking for a similar solution, we recommend Graham Pugh’s eraseinstall script.\nThank you, all, again!\nTeam EraseInstall: Arnold Nefkens, Armin Briegel, and Mischa van der Bent\n","permalink":"https://appleshare.it/posts/eraseinstall/","summary":"It makes me very sad that the EraseInstall application has been retired.\nWe built this tool three years ago, mostly because we wanted to learn how to build an app like this on macOS. We think it worked out well. We learned a lot, and are glad the application was useful to some.\nSince then, all the people involved in the EraseInstall Project have moved on to other jobs or other responsibilities.","title":"EraseInstall application retired"},{"content":" github.com/mvdbent/CIS-Reporting\nWhile i was working with Jamf\u0026rsquo;s CIS Benchmark, Script and Configuration Profile Remediation tool, I had the feeling there was missing a overview with compleet reporting. You can find some info by the device record in Jamf, however this was only for the Non-compliant items.\nTo expand the Jamf Proffessional Services CIS for macOS Catalina - Script and Configuration Profile Remediation, I created the 4_Security_Report.sh.\nUsage/Requirements This script is tested on macOS Big Sur 11.* Make sure that the script has the correct permissions chmod +x 4_Security_Report.sh Reporting document will be stored in the folder \u0026ldquo;Reports\u0026rdquo; at the same location as the script. When the script is done, the report will be opend in Numbers, Microsoft Excel or other prefered text editor of your choice. Script must be run as root, or have root privileges\nsudo ./Security_Report.sh Reporting all or use organizational compliance scoring The script reads the org_security_score.plist if present otherwise it creates a full report of the CIS Security State of the device. The CIS-Reporting script preformes a read-only report on the state, and doesn\u0026rsquo;t change anything.\nBuild-in option, the option to choose orgSecurityScore (0) or for reporting all (1), no need for an organizational compliance scoring to see the CIS Security State of your device.\n# set to 0 for orgSecurityScore, 1 for reporting all orgSecurityScore=0 The result is a .csv file, including a remediation instructions and will be stored in the folder \u0026ldquo;Reports\u0026rdquo; at the same location as the script.\nResources github.com/mvdbent/CIS-Reporting\n","permalink":"https://appleshare.it/posts/cis-reporting/","summary":"github.com/mvdbent/CIS-Reporting\nWhile i was working with Jamf\u0026rsquo;s CIS Benchmark, Script and Configuration Profile Remediation tool, I had the feeling there was missing a overview with compleet reporting. You can find some info by the device record in Jamf, however this was only for the Non-compliant items.\nTo expand the Jamf Proffessional Services CIS for macOS Catalina - Script and Configuration Profile Remediation, I created the 4_Security_Report.sh.\nUsage/Requirements This script is tested on macOS Big Sur 11.","title":"CIS-Reporting"},{"content":" While working from home, we all have a lot of meetings, and sometimes a family member or a roommate has no idea that you are in a meeting and they walk into the room without even a knock. Setting up a light to show when you are \u0026ldquo;ON AIR\u0026rdquo; or in a meeting is a great solution. There are several solutions out on the internet that can do this. Still, a lot of these solutions connect to your calendar via IFTTT or Zapier and then you need to create an action with homekit or homebridge to turn on a light with the colour red when in a meeting and green when it is safe to enter. Another straightforward way is to buy a button that turns a light on or off. (The trick is to try not to forget to push the button, I always forget)\nIn this case, I couldn\u0026rsquo;t connect my work calendar these 3rd party services or send a webhook event from an API, when a meeting has started or ended.\nAlso, another challenge is that I am using multiple meeting applications (Zoom, WebEx, Microsoft Teams, Slack, etc.), and each application has its way of doing things.\nThen when discussing with my manager and colleagues, I came up with an idea to have a script that monitors your mac for an active online meeting. When the camera and mic are on!! As in full active participation, not just listing in. Once a meeting found, it can then control the HueLights via API.\nSet up What i used for this setup:\nPhilips Hue Bridge v2 Hue Bloom - Model: LLC011 Web Browser (Safari, Google Chrome) Text Editor (BBEdit, Coderunner) macOS Automator.app (located in /Applications) Create a API user in Bridge link to source\nFirst we need to search for the Hue Bridge on your network. To lookup on your network use the following link: https://discovery.meethue.com/\nResult example:\n[{\u0026#34;id\u0026#34;:\u0026#34;001234ddse27c6be\u0026#34;,\u0026#34;internalipaddress\u0026#34;:\u0026#34;10.0.1.111\u0026#34;}] Use the internal API Debugger to create an API User, go to https://10.0.1.111/debug/clip.html Change #internalipaddress into the internalipaddress you just found.\nWe the following command in the API Debugger tool, we are generating a API user. Fill in the info like below (you can use your own name) in the API Debugger and press the POST button.\nURL: /api Message Body: {\u0026#34;devicetype\u0026#34;:\u0026#34;my_hue_app#username\u0026#34;} When you press the POST button you should get back an error message letting you know that you have to press the link button\nResult example:\n[ { \u0026#34;error\u0026#34;: { \u0026#34;type\u0026#34;: 101, \u0026#34;address\u0026#34;: \u0026#34;/\u0026#34;, \u0026#34;description\u0026#34;: \u0026#34;link button not pressed\u0026#34; } } ] Now press the button on the bridge and then press the POST button again and you should get a success response like below.\nResult example:\n[ { \u0026#34;success\u0026#34;: { \u0026#34;username\u0026#34;: \u0026#34;FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV\u0026#34; } } ] We now have enabled an API user and now we can authenticate with the Hue Bridge for communication. Please write down the Hue API hash that you got.\nNow we can test with the following command:\nURL: https://10.0.1.111/api/FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV Message Body: When you press the GET button you should get back a list of devices that are connected to the bridge\n{ \u0026#34;lights\u0026#34;: { \u0026#34;1\u0026#34;: { \u0026#34;state\u0026#34;: { \u0026#34;on\u0026#34;: true, \u0026#34;bri\u0026#34;: 254, \u0026#34;hue\u0026#34;: 25600, \u0026#34;sat\u0026#34;: 254, \u0026#34;effect\u0026#34;: \u0026#34;none\u0026#34;, \u0026#34;xy\u0026#34;: [ 0.2151, 0.7106 ], \u0026#34;alert\u0026#34;: \u0026#34;lselect\u0026#34;, \u0026#34;colormode\u0026#34;: \u0026#34;xy\u0026#34;, \u0026#34;mode\u0026#34;: \u0026#34;homeautomation\u0026#34;, \u0026#34;reachable\u0026#34;: true }, \u0026#34;swupdate\u0026#34;: { \u0026#34;state\u0026#34;: \u0026#34;noupdates\u0026#34;, \u0026#34;lastinstall\u0026#34;: \u0026#34;2018-12-12T19:06:42\u0026#34; }, \u0026#34;type\u0026#34;: \u0026#34;Color light\u0026#34;, \u0026#34;name\u0026#34;: \u0026#34;Hue bloom 1\u0026#34;, \u0026#34;modelid\u0026#34;: \u0026#34;LLC011\u0026#34;, \u0026#34;manufacturername\u0026#34;: \u0026#34;Signify Netherlands B.V.\u0026#34;, \u0026#34;productname\u0026#34;: \u0026#34;Hue bloom\u0026#34;, \u0026#34;capabilities\u0026#34;: { \u0026#34;certified\u0026#34;: true, \u0026#34;control\u0026#34;: { \u0026#34;mindimlevel\u0026#34;: 10000, \u0026#34;maxlumen\u0026#34;: 120, \u0026#34;colorgamuttype\u0026#34;: \u0026#34;A\u0026#34;, \u0026#34;colorgamut\u0026#34;: [ [ 0.704, 0.296 ], [ 0.2151, 0.7106 ], [ 0.138, 0.08 ] ] }, \u0026#34;streaming\u0026#34;: { \u0026#34;renderer\u0026#34;: true, \u0026#34;proxy\u0026#34;: false } }, \u0026#34;config\u0026#34;: { \u0026#34;archetype\u0026#34;: \u0026#34;huebloom\u0026#34;, \u0026#34;function\u0026#34;: \u0026#34;decorative\u0026#34;, \u0026#34;direction\u0026#34;: \u0026#34;upwards\u0026#34;, \u0026#34;startup\u0026#34;: { \u0026#34;mode\u0026#34;: \u0026#34;safety\u0026#34;, \u0026#34;configured\u0026#34;: true } }, \u0026#34;uniqueid\u0026#34;: \u0026#34;00:11:22:01:00:1c:4e:ec-0b\u0026#34;, \u0026#34;swversion\u0026#34;: \u0026#34;5.127.1.26581\u0026#34; }, } } For testing we are going to use the light with the ID 1\nSecurely store Passwords into the macOS Keychain Why put cleartext passwords in scripts, when we can use the macOS Keychain to securely store this information for us.\nI added this easy way to the script, so we can have a placeholder for the password rather then leaking this password within the script.\nHow to After creating the API user with the API Debugger tool, we received the Hue API Hash. We are going to add the Hue API Hash into the macOS Keychain with the security command. For this command we are using -T to add an entry to the login keychain and add the security binary to \u0026ldquo;Always allow access by these applications:\u0026rdquo; list in the Access Control preferences.\nsecurity add-generic-password [-s service] [-a account] [-w password] -T [appPath] Usage: -s service Specify service name (required) -a account Specify account name (required) -w password Specify password to be added. Put at end of command to be prompted (recommended) -T appPath Specify an application which may access this item (multiple -T options are allowed) Example:\nsecurity add-generic-password -s hueAPIHash -a HUEAPI -w FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV -T /usr/bin/security Now we securely store the Hue API Hash into the macOS Keychain, and allowing the security binary to access this entry. We can use the security command to fetch the Hue API Hash.\nsecurity find-generic-password [-s service] -w Usage: -s service Match service string -w Display the password(only) for the item found We only need to provide the service name and ask for the password\nExample:\nsecurity find-generic-password -s \u0026#34;hueAPIHash\u0026#34; -w #RESULT FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV See the man page security in terminal for more options. man security\nNow we have all the info we need to fill in the Global variables in the script\n# Global variables hueBridge=\u0026#39;10.0.1.111\u0026#39; #use your internal ipaddress hueApiHash=$(security find-generic-password -s \u0026#34;hueAPIHash\u0026#34; -w) #use your service name by [-s \u0026#34;hueAPIHash\u0026#34;] hueLight=\u0026#34;1\u0026#34; #use your light ID that you wanna use Scan for any Running Meetings The Challenge \u0026ldquo;How do we know when we are in a meeting\u0026rdquo; (even when we have turned off the Camera and/or mic)\nOur options are:\nWe could look for running process, but this doesn\u0026rsquo;t mean you are in a meeting. Hook our calendar up to a 3rd party service (can\u0026rsquo;t do that) The only thing that seems to be content and reliable is if there is an open connection.\nRunning lsof (List open files) command without any options will list all open files of your system that belongs to all active process. This process takes a while and you will get a full list of everything, but we don\u0026rsquo;t need all this information.\nWe are going to narrow this down to only internet related connections by adding -i to the command.\nExample\nlsof -i | grep zoom zoom.us 53231 mvdbent 26u IPv4 0x64763030ad598a1d 0t0 TCP 10.0.1.116:60144-\u0026gt;ec2-3-235-72-248.compute-1.amazonaws.com:https (ESTABLISHED) zoom.us 53231 mvdbent 48u IPv4 0x64763030acb3165d 0t0 TCP 10.0.1.116:63973-\u0026gt;ec2-52-202-62-196.compute-1.amazonaws.com:https (ESTABLISHED) zoom.us 53231 mvdbent 51u IPv4 0x64763030adc2b03d 0t0 TCP 10.0.1.116:55830-\u0026gt;ec2-3-235-96-204.compute-1.amazonaws.com:https (ESTABLISHED) zoom.us 53231 mvdbent 56u IPv4 0x64763030a88c4c7d 0t0 TCP 10.0.1.116:63978-\u0026gt;149.137.8.183:https (ESTABLISHED) We now add the following options to the lsof command:\n-a option ( can be used to ANDed the selections) -n (inhibits the conversion of network numbers to host names for network files) -P (inhibits the conversion of port numbers to port names for network files) We want to inhibit the output so lsof can give us results faster. Example\nlsof -anP -i | grep zoom zoom.us 53231 mvdbent 26u IPv4 0x64763030ad598a1d 0t0 TCP 10.0.1.116:60144-\u0026gt;3.235.72.248:https (ESTABLISHED) zoom.us 53231 mvdbent 48u IPv4 0x64763030acb3165d 0t0 TCP 10.0.1.116:63973-\u0026gt;52.202.62.196:https (ESTABLISHED) zoom.us 53231 mvdbent 51u IPv4 0x64763030adc2b03d 0t0 TCP 10.0.1.116:55830-\u0026gt;3.235.96.204:https (ESTABLISHED) zoom.us 53231 mvdbent 56u IPv4 0x64763030a88c4c7d 0t0 TCP 10.0.1.116:63978-\u0026gt;149.137.8.183:https (ESTABLISHED) Now we found the active process that have a internet related connection, this still doesn\u0026rsquo;t mean that we are in a meeting. This means that the Zoom.us app is opend and logged in with your account. After starting a meeting in zoom, we got extra connections based on UDP added.\nExample\nlsof -anP -i | grep zoom zoom.us 53231 mvdbent 26u IPv4 0x64763030ad598a1d 0t0 TCP 10.0.1.116:60144-\u0026gt;3.235.72.248:https (ESTABLISHED) zoom.us 53231 mvdbent 48u IPv4 0x64763030acb3165d 0t0 TCP 10.0.1.116:63973-\u0026gt;52.202.62.196:https (ESTABLISHED) zoom.us 53231 mvdbent 51u IPv4 0x64763030adc2b03d 0t0 TCP 10.0.1.116:55830-\u0026gt;3.235.96.204:https (ESTABLISHED) zoom.us 53231 mvdbent 56u IPv4 0x64763030a88c4c7d 0t0 TCP 10.0.1.116:63978-\u0026gt;149.137.8.183:https (ESTABLISHED) zoom.us 53231 mvdbent 60u IPv4 0x64763030846e819d 0t0 UDP 10.0.1.116:63026 zoom.us 53231 mvdbent 61u IPv4 0x64763030846e8d3d 0t0 UDP 10.0.1.116:58615 zoom.us 53231 mvdbent 65u IPv4 0x64763030846e98dd 0t0 UDP *:53327 zoom.us 53231 mvdbent 67u IPv4 0x6476303084763a55 0t0 UDP *:55248 zoom.us 53231 mvdbent 68u IPv4 0x647630307bd37d3d 0t0 UDP *:53574 So i did a couple of test, ended the meeting, UDP connections where gone, started a new meeting, UDP connections are back turned. Turned off my Camera, then turned on, turned off the Microphone, and turned both off, the UDP connections where still there. Awesome No we now where to look for when it comes to Zoom.us.\nWe only need to list the network files with TCP state LISTEN, with the -sTCP:LISTEN option\nOptional: We can specifies the IP version, IPv4 or IPv6 by adding 4 or 6, in the script we specify IPv4.\nExample\nlsof -anP -i4 -sTCP:LISTEN | grep zoom zoom.us 53231 mvdbent 60u IPv4 0x64763030846e819d 0t0 UDP 10.0.1.116:63026 zoom.us 53231 mvdbent 61u IPv4 0x64763030846e8d3d 0t0 UDP 10.0.1.116:58615 zoom.us 53231 mvdbent 65u IPv4 0x64763030846e98dd 0t0 UDP *:53327 zoom.us 53231 mvdbent 67u IPv4 0x6476303084763a55 0t0 UDP *:55248 zoom.us 53231 mvdbent 68u IPv4 0x647630307bd37d3d 0t0 UDP *:53574 Usage: -a\tcauses list selection options to be ANDed, as described above. -n\tinhibits the conversion of network numbers to host names for network files. Inhibiting conversion may make lsof run faster. It is also useful when host name lookup is not working properly. -P\tinhibits the conversion of port numbers to port names for network files. Inhibiting the conversion may make lsof run a little faster. It is also useful when port name lookup is not working properly. -i selects the listing of files any of whose Internet address matches the address specified in i. If no address is specified, this option selects the listing of all Internet and x.25 (HP-UX) network files 46 specifies the IP version, IPv4 or IPv6 that applies to the following address. \u0026#39;6\u0026#39; may be be specified only if the UNIX dialect supports IPv6. If neither \u0026#39;4\u0026#39; nor \u0026#39;6\u0026#39; is specified, the following address applies to all IP versions. sTCP\tTo list only network files with TCP state LISTEN, use: -sTCP:LISTEN Fun fact is that beside of zoom.us, Microsoft Teams, Cisco WebEx, Slack and FaceTime is also using TCP state LISTEN. Only Microsoft Teams connected this to your localIP\nExample\nlsof -anP -i4 -sTCP:LISTEN | grep Microsoft | grep 10.0.1.116:\u0026#39;*\u0026#39; Microsoft 67439 mvdbent 45u IPv4 0x647644287bdb076d 0t0 UDP 10.0.1.116:50023 This script will look for zoom.us, Microsoft Teams, Cisco WebEx, Slack and FaceTime online sessions. Want to have\nCreate an Automator app that loops this script. Now we have a script that scans locally for any running meetings, so we need to create an easy way to start and stop this process.\nFor this version we will use the Apple Automator.app to create an application.\nCreate a New Document and choose type Application\nAdd Action Run Shell Script Copy the contents of autorunscript.sh and paste this into the Run Shell Script input field. Add an other Action Loop. Change Ask to continue to Loop automatically and Stop after 480 Minutes (8 hours) Save the Application to your preferred location, you can add this to your Dock where you can easy start the App, or add the App to the Login Items to open automatically. If you want to stop/quit the App, in the menubar click on on the spinning gear icon, behind the status, App name (Loop), you can click the X to quit the App.\nResources github.com/mvdbent/onAirScanner\n","permalink":"https://appleshare.it/posts/onairscanner/","summary":"While working from home, we all have a lot of meetings, and sometimes a family member or a roommate has no idea that you are in a meeting and they walk into the room without even a knock. Setting up a light to show when you are \u0026ldquo;ON AIR\u0026rdquo; or in a meeting is a great solution. There are several solutions out on the internet that can do this. Still, a lot of these solutions connect to your calendar via IFTTT or Zapier and then you need to create an action with homekit or homebridge to turn on a light with the colour red when in a meeting and green when it is safe to enter.","title":"onAirScanner"},{"content":" The truth about MDM Migration: Journey through time as Jamf consulting engineer me and Rob Potvin will talk about the current design of the Apple MDM protocol and what the migration process looks like for moving existing devices from one MDM to another.\nThis can be fairly difficult, but success is possible with a bit of time, effort and planning. It is not really migrating, but destroying trust.\nPresentation Video Tools ReEnroller\nJamf Migrator\n","permalink":"https://appleshare.it/posts/thestoryoftrustdestroyed/","summary":"The truth about MDM Migration: Journey through time as Jamf consulting engineer me and Rob Potvin will talk about the current design of the Apple MDM protocol and what the migration process looks like for moving existing devices from one MDM to another.\nThis can be fairly difficult, but success is possible with a bit of time, effort and planning. It is not really migrating, but destroying trust.\nPresentation Video Tools ReEnroller","title":"The story of trust destroyed | JNUC 2020"},{"content":"Securely store Passwords into the macOS Keychain Why put cleartext passwords in scripts, when we can use the macOS Keychain to securely store this information for us.\nHow to have a easy way to include this into your scripts, so we can have a placeholder for the password rather then leaking this password within the script.\nHow to We are going to add an PASSWORD into the macOS Keychain with the security command. For this command we are using -T to add an entry to the login keychain and add the security binary to \u0026ldquo;Always allow access by these applications:\u0026rdquo; list in the Access Control preferences.\nsecurity add-generic-password [-s service] [-a account] [-w password] -T [appPath] Usage: -s service Specify service name (required) -a account Specify account name (required) -w password Specify password to be added. Put at end of command to be prompted (recommended) -T appPath Specify an application which may access this item (multiple -T options are allowed) Example:\nsecurity add-generic-password -s `SERVICE-NAME` -a `ACCOUNT-NAME` -w `PASSWORD` -T /usr/bin/security Now we securely store the PASSWORD into the macOS Keychain, and allowing the security binary to access this entry. We can use the security command to fetch the PASSWORD.\nsecurity find-generic-password [-s service] -w Usage: -s service Match service string -w Display the password(only) for the item found We only need to provide the service name and ask for the password\nExample:\nsecurity find-generic-password -s `SERVICE-NAME` -w #RESULT `PASSWORD` Now we can include this placeholder into the scripts, and fetch the PASSWORD in a secure way.\n# Variables serviceName=SERVICE-NAME password=$(security find-generic-password -s ${serviceName} -w) See the man page security in terminal for more options. man security\n","permalink":"https://appleshare.it/posts/securely-store-passwords/","summary":"Securely store Passwords into the macOS Keychain Why put cleartext passwords in scripts, when we can use the macOS Keychain to securely store this information for us.\nHow to have a easy way to include this into your scripts, so we can have a placeholder for the password rather then leaking this password within the script.\nHow to We are going to add an PASSWORD into the macOS Keychain with the security command.","title":"Securely Store Passwords"},{"content":" Imaging is dead. Secure Boot and the T2 system controller have changed the toolset available to Mac administrators. The new post-imaging world of Mojave requires new workflows. We learn about the role that \u0026lsquo;off-boarding\u0026rsquo; or the erase/install step has in the modern macOS deployment cycle. In this session, we will explore the startosinstall command in detail and learn about its uses and limitations. Finally, we will introduce a few workflows and tools (Erase\u0026amp;Install.app) that you can use to quickly offboard or reset your Macs.\nNotes and links for my “Off-boarding in a Modern Deployment” presentation at Jamf Nation User Conference 2019 in Minneapolis.\nPresentation Slides iCloud, SpeakerDeck, PDF\nVideo\nTools Erase \u0026amp; Install Application (Blog)\n#eraseinstall on MacAdmins Slack\nReinstall a clean macOS with one button by Bill Smith\nerase-install by Graham Pugh (Blog, Github)\nMDS by Twocanoes\nResources Swift for Apple Admins\nMacAdmins Podcast: Erase all the Things with Armin Briegel\nApple Links Availability of Apple programs and payment methods for education and business\nHuman Interface Guidelines\nMore links installr from Greg Neagle\nDevice Snapshots and Crafting A Restore Device User Experience for Macs – Charles Edge\n","permalink":"https://appleshare.it/posts/off-boarding/","summary":"Imaging is dead. Secure Boot and the T2 system controller have changed the toolset available to Mac administrators. The new post-imaging world of Mojave requires new workflows. We learn about the role that \u0026lsquo;off-boarding\u0026rsquo; or the erase/install step has in the modern macOS deployment cycle. In this session, we will explore the startosinstall command in detail and learn about its uses and limitations. Finally, we will introduce a few workflows and tools (Erase\u0026amp;Install.","title":"Off-boarding in a Modern Deployment | JNUC 2019"},{"content":" In this JNUC session, we talk through some of the details of automating various components of your Apple environment.\nHow to automate your \u0026ldquo;favorite\u0026rdquo; workflows. Let’s face it — one of the main reasons many people come to the Jamf Nation User Conference (JNUC) is to automate the crap out of their environment and have it run like a well-oiled machine. In this panel, we talk through some of the details of automating various components of your Apple environment, including Jamf.\n","permalink":"https://appleshare.it/posts/automationpanel/","summary":"In this JNUC session, we talk through some of the details of automating various components of your Apple environment.\nHow to automate your \u0026ldquo;favorite\u0026rdquo; workflows. Let’s face it — one of the main reasons many people come to the Jamf Nation User Conference (JNUC) is to automate the crap out of their environment and have it run like a well-oiled machine. In this panel, we talk through some of the details of automating various components of your Apple environment, including Jamf.","title":"Automation Panel | JNUC 2018"},{"content":" Hi there,\nMy name is Mischa van der Bent and this is my personal blog and mainly write about sharing my experience with Apple IT related matters and share what I think is interesting to share.\nDisclaimer: all posts, opinions, suggestions, remarks, information or statements of any kind, are my own. My current employer Jamf, or any other 3rd party mentioned in, or linked to, any part of this blog, can never be held responsible for the information on this website.\nI have been supporting Apple devices since the late 90s. Had a couple of Apple IT roles before started my own company which grew into an Apple Authorized Enterprise Reseller. Currently working as a Supervisor, Consulting Engineer at Jamf, and helping organizations understand how to manage, deploy and support Apple devices on any scale, from small businesses to large international enterprises. The goals are to keep it simple, connect the dots and automate what is possible.\nHope you will enjoy my blogpost!\nYou can contact or follow me on Twitter, Github, Linkedin or MacAdmins Slack\nPresentations I regularly give presentations on topics relevant to Apple IT at conferences and meeting. Some are available online:\nAutomating CIS Benchmark Reporting and Remediation | JNUC 2022\nAutomating CIS Benchmark Reporting and Remediation | MacSysAdmins 2021\nThe story of trust destroyed | JNUC 2020\nOffboarding in a Modern Deployment Workflow | JNUC 2019\nAutomation Panel | JNUC 2018\nCaffeinate this blog ","permalink":"https://appleshare.it/about/","summary":"Hi there,\nMy name is Mischa van der Bent and this is my personal blog and mainly write about sharing my experience with Apple IT related matters and share what I think is interesting to share.\nDisclaimer: all posts, opinions, suggestions, remarks, information or statements of any kind, are my own. My current employer Jamf, or any other 3rd party mentioned in, or linked to, any part of this blog, can never be held responsible for the information on this website.","title":"About the Author"},{"content":" I know there are tons of community resources, can\u0026rsquo;t list them all but here are some pages/people I follow and love ❤ that you could check.\nBooks Apple Pro Training Series\nBooks for Apple Administrators\nHacking with macOS\nPodcasts Apple @ Work\nCommand Control Power\nJamf After Dark\nMac Admins Podcast\nThe History of Computing\nWebsites Armin Briegel - Scripting OS X (MacAdmin Support Pages)\nBen Toms - MacMule\nBill Smith\nCharles Edge - Krypted.com\nEmily Kausalik-Whittle\nErik Gomez\nFrederick Abeloos - Travelling Tech Guy\nGraham Gilbert\nGraham R Pugh\nGreg Neagle\nHoward Oakley - The Eclectic Light Company\nPatrick Wardle - Objective-by-the-Sea\nRich Trouton - Der Flounder\nRichard Purves - Der Flounder\nRyan aka Mr. Macintosh\nJamf Nation Community\nJamf Technical Articles\nMacAdmins\nMacSysAdmin\n","permalink":"https://appleshare.it/links/","summary":"I know there are tons of community resources, can\u0026rsquo;t list them all but here are some pages/people I follow and love ❤ that you could check.\nBooks Apple Pro Training Series\nBooks for Apple Administrators\nHacking with macOS\nPodcasts Apple @ Work\nCommand Control Power\nJamf After Dark\nMac Admins Podcast\nThe History of Computing\nWebsites Armin Briegel - Scripting OS X (MacAdmin Support Pages)\nBen Toms - MacMule","title":"Links"}]