<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
    <channel>
        <title>Posts on AppleShare IT</title>
        <link>/posts/</link>
        <description>Recent content in Posts on AppleShare IT</description>
        <generator>Hugo -- gohugo.io</generator>
        <language>en-us</language>
        <copyright>mvdbent</copyright>
        <lastBuildDate>Sun, 03 Oct 2021 00:00:00 +0000</lastBuildDate>
        <atom:link href="/posts/index.xml" rel="self" type="application/rss+xml" />
        
        <item>
            <title>CIS-Script</title>
            <link>/posts/2021/10/cis-script/</link>
            <pubDate>Sun, 03 Oct 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/10/cis-script/</guid>
            <description>This blog is about the CIS-Script
#!/bin/zsh  export PATH=/usr/bin:/bin:/usr/sbin:/sbin #################################################################################################### #################################################################################################### # DESCRIPTION # This will upload CIS Benchmark Scoring CSV to the computer record #################################################################################################### #################################################################################################### if [ &amp;#34;$4&amp;#34; != &amp;#34;&amp;#34; ] &amp;amp;&amp;amp; [ &amp;#34;$basic_auth&amp;#34; == &amp;#34;&amp;#34; ]; then basic_auth=$4 else echo &amp;#34;basic_auth is unset, please insert base64-encoded credentials within Parameter 4 in Jamf Pro&amp;#34; exit 1 fi should become
▾ &amp;lt;root&amp;gt;/ ▾ static/ ▾ images/ logo.png Change your submodule to point to map gh-pages to public instead of _site (recommended).</description>
            <content type="html"><![CDATA[
    <img src="/img/CIS-Script.png"  class="center"  style="border-radius: 8px; height: 300px;"  />


<p>This blog is about the <code>CIS-Script</code></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e">#!/bin/zsh
</span><span style="color:#75715e"></span>
export PATH<span style="color:#f92672">=</span>/usr/bin:/bin:/usr/sbin:/sbin

<span style="color:#75715e">####################################################################################################</span>
<span style="color:#75715e">####################################################################################################</span>
<span style="color:#75715e">#        DESCRIPTION</span>
<span style="color:#75715e">#        This will upload CIS Benchmark Scoring CSV to the computer record</span>
<span style="color:#75715e">####################################################################################################</span>
<span style="color:#75715e">####################################################################################################</span>

<span style="color:#66d9ef">if</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$4<span style="color:#e6db74">&#34;</span> !<span style="color:#f92672">=</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span> <span style="color:#f92672">&amp;&amp;</span> <span style="color:#f92672">[</span> <span style="color:#e6db74">&#34;</span>$basic_auth<span style="color:#e6db74">&#34;</span> <span style="color:#f92672">==</span> <span style="color:#e6db74">&#34;&#34;</span> <span style="color:#f92672">]</span>; <span style="color:#66d9ef">then</span>
	basic_auth<span style="color:#f92672">=</span>$4
<span style="color:#66d9ef">else</span>
	echo <span style="color:#e6db74">&#34;basic_auth is unset, please insert base64-encoded credentials within Parameter 4 in Jamf Pro&#34;</span>
	exit <span style="color:#ae81ff">1</span>
<span style="color:#66d9ef">fi</span>

</code></pre></div><p>should become</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">	▾ &lt;root&gt;/
		▾ static/
			▾ images/
				logo.png
</code></pre></div><p>Change your submodule to point to map <code>gh-pages</code> to public instead of <code>_site</code> (recommended).</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-swift" data-lang="swift">    	git submodule <span style="color:#66d9ef">deinit</span> _site
    	git rm _site
    	git submodule add <span style="color:#f92672">-</span>b gh<span style="color:#f92672">-</span>pages git@github.com:your<span style="color:#f92672">-</span>username<span style="color:#f92672">/</span>your<span style="color:#f92672">-</span>repo.git <span style="color:#66d9ef">public</span>
</code></pre></div>]]></content>
        </item>
        
        <item>
            <title>EraseInstall application retired</title>
            <link>/posts/2021/03/eraseinstall-application-retired/</link>
            <pubDate>Wed, 17 Mar 2021 00:00:00 +0000</pubDate>
            
            <guid>/posts/2021/03/eraseinstall-application-retired/</guid>
            <description>It makes me very sad that the EraseInstall application has been retired.
We built this tool three years ago, mostly because we wanted to learn how to build an app like this on macOS. We think it worked out well. We learned a lot, and are glad the application was useful to some.
Since then, all the people involved in the EraseInstall Project have moved on to other jobs or other responsibilities.</description>
            <content type="html"><![CDATA[
    <img src="https://bytebucket.org/prowarehouse-nl/erase-install/raw/e2538d9e567230fe3d1829cb0b1f006c65c51b6d/readMe_images/icon_512x512.png"  class="center"  style="border-radius: 8px; height: 300px;"  />


<p>It makes me very sad that the <a href="https://bitbucket.org/prowarehouse-nl/erase-install/"><strong>EraseInstall application</strong></a> has been retired.</p>
<p>We built this tool three years ago, mostly because we wanted to learn how to build an app like this on macOS. We think it worked out well. We learned a lot, and are glad the application was useful to some.</p>
<p>Since then, all the people involved in the EraseInstall Project have moved on to other jobs or other responsibilities. Unfortunately, this leaves us with no time or resources to maintain or improve EraseInstall.</p>
<p>The <a href="https://bitbucket.org/prowarehouse-nl/erase-install/src/master/"><strong>repository</strong></a> and the application will remain available in its current state. There will be no more updates. If someone feels they can take up the project and continue it, please do!</p>
<p>If you are looking for a similar solution, we recommend <a href="https://github.com/grahampugh/erase-install"><strong>Graham Pugh’s eraseinstall script</strong></a>.</p>
<p>Thank you, all, again!</p>
<p><em>Team EraseInstall: Arnold Nefkens, Armin Briegel, and Mischa van der Bent</em></p>
]]></content>
        </item>
        
        <item>
            <title>onAirScanner</title>
            <link>/posts/2020/10/onairscanner/</link>
            <pubDate>Tue, 27 Oct 2020 00:00:00 +0000</pubDate>
            
            <guid>/posts/2020/10/onairscanner/</guid>
            <description>SOURCE onAirScanner - GitHub While working from home, we all have a lot of meetings, and sometimes a family member or a roommate has no idea that you are in a meeting and they walk into the room without even a knock. Setting up a light to show when you are &amp;ldquo;ON AIR&amp;rdquo; or in a meeting is a great solution. There are several solutions out on the internet that can do this.</description>
            <content type="html"><![CDATA[
    <img src="https://github.com/mvdbent/onAirScanner/blob/main/OnAir.png?raw=true"  class="center"  style="border-radius: 8px; height: 300px;"  />


<p><a href="https://github.com/mvdbent/onAirScanner"><strong>SOURCE onAirScanner - GitHub</strong></a>
<img src="https://img.shields.io/github/v/release/mvdbent/onAirScanner?style=flat-square" alt="GitHub release (latest by date)"></p>
<p>While working from home, we all have a lot of meetings, and sometimes a family member or a roommate has no idea that you are in a meeting and they walk into the room without even a knock.
Setting up a light to show when you are &ldquo;ON AIR&rdquo; or in a meeting is a great solution.
There are several solutions out on the internet that can do this. Still, a lot of these solutions connect to your calendar via <a href="https://ifttt.com"><em>IFTTT</em></a> or <a href="https://zapier.com/"><em>Zapier</em></a> and then you need to create an action with homekit or homebridge to turn on a light with the colour red when in a meeting and green when it is safe to enter.
Another straightforward way is to buy a button that turns a light on or off. (The trick is to try not to forget to push the button, I always forget)</p>
<p>In this case, I couldn&rsquo;t connect my work calendar these 3rd party services or send a webhook event from an API, when a meeting has started or ended.</p>
<p>Also, another challenge is that I am using multiple meeting applications (Zoom, WebEx, Microsoft Teams, Slack, etc.), and each application has its way of doing things.</p>
<p>Then when discussing with my manager and colleagues,  I came up with an idea to have a script that monitors your mac for an active online meeting. When the camera and mic are on!! As in full active participation, not just listing in.
Once a meeting found, it can then control the HueLights via API.</p>
<h3 id="set-up">Set up</h3>
<p><em>What i used for this setup:</em></p>
<ul>
<li>Philips Hue Bridge v2</li>
<li>Hue Bloom - Model: LLC011</li>
<li>Web Browser <em>(Safari, Google Chrome)</em></li>
<li>Text Editor <em>(BBEdit, Coderunner)</em></li>
<li>macOS Automator.app <em>(located in /Applications)</em></li>
</ul>
<p><em>Create a API user in Bridge</em> <a href="https://developers.meethue.com/develop/get-started-2/">link to source</a></p>
<p>First we need to search for the Hue Bridge on your network. To lookup on your network use the following link: <a href="https://discovery.meethue.com/">https://discovery.meethue.com/</a></p>
<p><em>Result example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">[{&#34;id&#34;:&#34;001234ddse27c6be&#34;,&#34;internalipaddress&#34;:&#34;10.0.1.111&#34;}]
</code></pre></div><p>Use the internal API Debugger to create an API User, go to https://10.0.1.111/debug/clip.html
Change #internalipaddress into the internalipaddress you just found.</p>
<p>We the following command in the API Debugger tool, we are generating a API user.
Fill in the info like below (you can use your own name) in the API Debugger and press the <code>POST</code> button.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-html" data-lang="html">URL: /api
Message Body:
{&#34;devicetype&#34;:&#34;my_hue_app#username&#34;}
</code></pre></div><p>When you press the <code>POST</code> button you should get back an error message letting you know that you have to press the link button</p>
<p><em>Result example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[
	{
		<span style="color:#f92672">&#34;error&#34;</span>: {
			<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#ae81ff">101</span>,
			<span style="color:#f92672">&#34;address&#34;</span>: <span style="color:#e6db74">&#34;/&#34;</span>,
			<span style="color:#f92672">&#34;description&#34;</span>: <span style="color:#e6db74">&#34;link button not pressed&#34;</span>
		}
	}
]
</code></pre></div><p>Now press the button on the bridge and then press the <code>POST</code> button again and you should get a success response like below.</p>
<p><em>Result example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">[
	{
		<span style="color:#f92672">&#34;success&#34;</span>: {
			<span style="color:#f92672">&#34;username&#34;</span>: <span style="color:#e6db74">&#34;FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV&#34;</span>
		}
	}
]
</code></pre></div><p>We now have enabled an API user and now we can authenticate with the Hue Bridge for communication.
Please write down the Hue API hash that you got.</p>
<p>Now we can test with the following command:</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-text" data-lang="text">URL: https://10.0.1.111/api/FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV
Message Body:
</code></pre></div><p>When you press the <code>GET</code> button you should get back a list of devices that are connected to the bridge</p>
<p><em>Result example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-json" data-lang="json">{
	<span style="color:#f92672">&#34;lights&#34;</span>: {
		<span style="color:#f92672">&#34;1&#34;</span>: {
			<span style="color:#f92672">&#34;state&#34;</span>: {
				<span style="color:#f92672">&#34;on&#34;</span>: <span style="color:#66d9ef">true</span>,
				<span style="color:#f92672">&#34;bri&#34;</span>: <span style="color:#ae81ff">254</span>,
				<span style="color:#f92672">&#34;hue&#34;</span>: <span style="color:#ae81ff">25600</span>,
				<span style="color:#f92672">&#34;sat&#34;</span>: <span style="color:#ae81ff">254</span>,
				<span style="color:#f92672">&#34;effect&#34;</span>: <span style="color:#e6db74">&#34;none&#34;</span>,
				<span style="color:#f92672">&#34;xy&#34;</span>: [
					<span style="color:#ae81ff">0.2151</span>,
					<span style="color:#ae81ff">0.7106</span>
				],
				<span style="color:#f92672">&#34;alert&#34;</span>: <span style="color:#e6db74">&#34;lselect&#34;</span>,
				<span style="color:#f92672">&#34;colormode&#34;</span>: <span style="color:#e6db74">&#34;xy&#34;</span>,
				<span style="color:#f92672">&#34;mode&#34;</span>: <span style="color:#e6db74">&#34;homeautomation&#34;</span>,
				<span style="color:#f92672">&#34;reachable&#34;</span>: <span style="color:#66d9ef">true</span>
			},
			<span style="color:#f92672">&#34;swupdate&#34;</span>: {
				<span style="color:#f92672">&#34;state&#34;</span>: <span style="color:#e6db74">&#34;noupdates&#34;</span>,
				<span style="color:#f92672">&#34;lastinstall&#34;</span>: <span style="color:#e6db74">&#34;2018-12-12T19:06:42&#34;</span>
			},
			<span style="color:#f92672">&#34;type&#34;</span>: <span style="color:#e6db74">&#34;Color light&#34;</span>,
			<span style="color:#f92672">&#34;name&#34;</span>: <span style="color:#e6db74">&#34;Hue bloom 1&#34;</span>,
			<span style="color:#f92672">&#34;modelid&#34;</span>: <span style="color:#e6db74">&#34;LLC011&#34;</span>,
			<span style="color:#f92672">&#34;manufacturername&#34;</span>: <span style="color:#e6db74">&#34;Signify Netherlands B.V.&#34;</span>,
			<span style="color:#f92672">&#34;productname&#34;</span>: <span style="color:#e6db74">&#34;Hue bloom&#34;</span>,
			<span style="color:#f92672">&#34;capabilities&#34;</span>: {
				<span style="color:#f92672">&#34;certified&#34;</span>: <span style="color:#66d9ef">true</span>,
				<span style="color:#f92672">&#34;control&#34;</span>: {
					<span style="color:#f92672">&#34;mindimlevel&#34;</span>: <span style="color:#ae81ff">10000</span>,
					<span style="color:#f92672">&#34;maxlumen&#34;</span>: <span style="color:#ae81ff">120</span>,
					<span style="color:#f92672">&#34;colorgamuttype&#34;</span>: <span style="color:#e6db74">&#34;A&#34;</span>,
					<span style="color:#f92672">&#34;colorgamut&#34;</span>: [
						[
							<span style="color:#ae81ff">0.704</span>,
							<span style="color:#ae81ff">0.296</span>
						],
						[
							<span style="color:#ae81ff">0.2151</span>,
							<span style="color:#ae81ff">0.7106</span>
						],
						[
							<span style="color:#ae81ff">0.138</span>,
							<span style="color:#ae81ff">0.08</span>
						]
					]
				},
				<span style="color:#f92672">&#34;streaming&#34;</span>: {
					<span style="color:#f92672">&#34;renderer&#34;</span>: <span style="color:#66d9ef">true</span>,
					<span style="color:#f92672">&#34;proxy&#34;</span>: <span style="color:#66d9ef">false</span>
				}
			},
			<span style="color:#f92672">&#34;config&#34;</span>: {
				<span style="color:#f92672">&#34;archetype&#34;</span>: <span style="color:#e6db74">&#34;huebloom&#34;</span>,
				<span style="color:#f92672">&#34;function&#34;</span>: <span style="color:#e6db74">&#34;decorative&#34;</span>,
				<span style="color:#f92672">&#34;direction&#34;</span>: <span style="color:#e6db74">&#34;upwards&#34;</span>,
				<span style="color:#f92672">&#34;startup&#34;</span>: {
					<span style="color:#f92672">&#34;mode&#34;</span>: <span style="color:#e6db74">&#34;safety&#34;</span>,
					<span style="color:#f92672">&#34;configured&#34;</span>: <span style="color:#66d9ef">true</span>
				}
			},
			<span style="color:#f92672">&#34;uniqueid&#34;</span>: <span style="color:#e6db74">&#34;00:11:22:01:00:1c:4e:ec-0b&#34;</span>,
			<span style="color:#f92672">&#34;swversion&#34;</span>: <span style="color:#e6db74">&#34;5.127.1.26581&#34;</span>
		},
	}
}
</code></pre></div><p>For testing we are going to use the light with the <strong>ID</strong> <code>1</code></p>
<h2 id="securely-store-passwords-into-the-macos-keychain">Securely store Passwords into the macOS Keychain</h2>
<p>Why put cleartext passwords in scripts, when we can use the macOS Keychain to securely store this information for us.</p>
<p>I added this easy way to the script, so we can have a placeholder for the password rather then leaking this password within the script.</p>
<h3 id="how-to">How to</h3>
<p>After creating the API user with the API Debugger tool, we received the Hue API Hash.
We are going to add the Hue API Hash into the macOS Keychain with the <code>security</code> command.
For this command we are using <code>-T</code> to add an entry to the login keychain and add the <code>security</code> binary to &ldquo;Always allow access by these applications:&rdquo; list in the Access Control preferences.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">security add-generic-password <span style="color:#f92672">[</span>-s service<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-a account<span style="color:#f92672">]</span> <span style="color:#f92672">[</span>-w password<span style="color:#f92672">]</span> -T <span style="color:#f92672">[</span>appPath<span style="color:#f92672">]</span>

Usage: 
-s service      Specify service name <span style="color:#f92672">(</span>required<span style="color:#f92672">)</span>
-a account      Specify account name <span style="color:#f92672">(</span>required<span style="color:#f92672">)</span>
-w password     Specify password to be added. Put at end of command to be prompted <span style="color:#f92672">(</span>recommended<span style="color:#f92672">)</span>
-T appPath      Specify an application which may access this item <span style="color:#f92672">(</span>multiple -T options are allowed<span style="color:#f92672">)</span>
</code></pre></div><p><em>Example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">security add-generic-password -s hueAPIHash -a HUEAPI -w FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV -T /usr/bin/security
</code></pre></div><p>Now we securely store the Hue API Hash into the macOS Keychain, and allowing the <code>security</code> binary to access this entry.
We can use the <code>security</code> command to fetch the Hue API Hash.</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">security find-generic-password <span style="color:#f92672">[</span>-s service<span style="color:#f92672">]</span> -w 
Usage:
-s service      Match service string
-w              Display the password<span style="color:#f92672">(</span>only<span style="color:#f92672">)</span> <span style="color:#66d9ef">for</span> the item found
</code></pre></div><p>We only need to provide the service name and ask for the password</p>
<p><em>Example:</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">security find-generic-password -s <span style="color:#e6db74">&#34;hueAPIHash&#34;</span> -w
<span style="color:#75715e">#RESULT</span>
FIAqb-53KaLBVzXKscihomProgvhUkRko59TAuV
</code></pre></div><p>See the man page security in terminal for more options. <code>man security</code></p>
<p>Now we have all the info we need to fill in the Global variables in the script</p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash"><span style="color:#75715e"># Global variables</span>
hueBridge<span style="color:#f92672">=</span><span style="color:#e6db74">&#39;10.0.1.111&#39;</span> <span style="color:#75715e">#use your internal ipaddress</span>
hueApiHash<span style="color:#f92672">=</span><span style="color:#66d9ef">$(</span>security find-generic-password -s <span style="color:#e6db74">&#34;hueAPIHash&#34;</span> -w<span style="color:#66d9ef">)</span> <span style="color:#75715e">#use your service name by [-s &#34;hueAPIHash&#34;]</span>
hueLight<span style="color:#f92672">=</span><span style="color:#e6db74">&#34;1&#34;</span> <span style="color:#75715e">#use your light ID that you wanna use</span>
</code></pre></div><h2 id="scan-for-any-running-meetings">Scan for any Running Meetings</h2>
<h3 id="the-challenge">The Challenge</h3>
<p><em>&ldquo;How do we know when we are in a meeting&rdquo;</em> (even when we have turned off the Camera and/or mic)</p>
<p>Our options are:</p>
<ul>
<li>We could look for running process, but this doesn&rsquo;t mean you are in a meeting.</li>
<li>Hook our calendar up to a 3rd party service (can&rsquo;t do that)</li>
</ul>
<p>The only thing that seems to be content and reliable is if there is an open connection.</p>
<p>Running <code>lsof</code> (List open files) command without any options will list all open files of your system that belongs to all active process.
This process takes a while and you will get a full list of everything, but we don&rsquo;t need all this information.</p>
<p>We are going to narrow this down to only internet related connections by adding <code>-i</code> to the command.</p>
<p><em>Example</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsof -i | grep zoom
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   26u  IPv4 0x64763030ad598a1d      0t0  TCP 10.0.1.116:60144-&gt;ec2-3-235-72-248.compute-1.amazonaws.com:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   48u  IPv4 0x64763030acb3165d      0t0  TCP 10.0.1.116:63973-&gt;ec2-52-202-62-196.compute-1.amazonaws.com:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   51u  IPv4 0x64763030adc2b03d      0t0  TCP 10.0.1.116:55830-&gt;ec2-3-235-96-204.compute-1.amazonaws.com:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   56u  IPv4 0x64763030a88c4c7d      0t0  TCP 10.0.1.116:63978-&gt;149.137.8.183:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
</code></pre></div><p>We now add the following options to the <code>lsof</code> command:</p>
<ul>
<li><strong>-a</strong> option ( can be used to ANDed the selections)</li>
<li><strong>-n</strong> (inhibits the conversion of network numbers to host names for network files)</li>
<li><strong>-P</strong> (inhibits the conversion of port numbers to port names for network files)
We want to inhibit the output so <code>lsof</code> can give us results <strong>faster</strong>.</li>
</ul>
<p><em>Example</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsof -anP -i | grep zoom
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   26u  IPv4 0x64763030ad598a1d      0t0  TCP 10.0.1.116:60144-&gt;3.235.72.248:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   48u  IPv4 0x64763030acb3165d      0t0  TCP 10.0.1.116:63973-&gt;52.202.62.196:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   51u  IPv4 0x64763030adc2b03d      0t0  TCP 10.0.1.116:55830-&gt;3.235.96.204:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   56u  IPv4 0x64763030a88c4c7d      0t0  TCP 10.0.1.116:63978-&gt;149.137.8.183:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
</code></pre></div><p>Now we found the active process that have a internet related connection, this still doesn&rsquo;t mean that we are in a meeting.
This means that the Zoom.us app is opend and logged in with your account.
After starting a meeting in zoom, we got extra connections based on UDP added.</p>
<p><em>Example</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsof -anP -i | grep zoom
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   26u  IPv4 0x64763030ad598a1d      0t0  TCP 10.0.1.116:60144-&gt;3.235.72.248:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   48u  IPv4 0x64763030acb3165d      0t0  TCP 10.0.1.116:63973-&gt;52.202.62.196:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   51u  IPv4 0x64763030adc2b03d      0t0  TCP 10.0.1.116:55830-&gt;3.235.96.204:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   56u  IPv4 0x64763030a88c4c7d      0t0  TCP 10.0.1.116:63978-&gt;149.137.8.183:https <span style="color:#f92672">(</span>ESTABLISHED<span style="color:#f92672">)</span>
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   60u  IPv4 0x64763030846e819d      0t0  UDP 10.0.1.116:63026
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   61u  IPv4 0x64763030846e8d3d      0t0  UDP 10.0.1.116:58615
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   65u  IPv4 0x64763030846e98dd      0t0  UDP *:53327
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   67u  IPv4 0x6476303084763a55      0t0  UDP *:55248
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   68u  IPv4 0x647630307bd37d3d      0t0  UDP *:53574
</code></pre></div><p>So i did a couple of test, ended the meeting, UDP connections where gone, started a new meeting, UDP connections are back turned.
Turned off my Camera, then turned on, turned off the Microphone, and turned both off, the UDP connections where still there. <em>Awesome</em> No we now where to look for when it comes to Zoom.us.</p>
<p>We only need to list the network files with TCP state LISTEN, with the <code>-sTCP:LISTEN</code> option</p>
<p>Optional: We can specifies the IP version, IPv4 or IPv6 by adding <code>4</code> or <code>6</code>, in the script we specify IPv4.</p>
<p><em>Example</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsof -anP -i4 -sTCP:LISTEN | grep zoom
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   60u  IPv4 0x64763030846e819d      0t0  UDP 10.0.1.116:63026
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   61u  IPv4 0x64763030846e8d3d      0t0  UDP 10.0.1.116:58615
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   65u  IPv4 0x64763030846e98dd      0t0  UDP *:53327
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   67u  IPv4 0x6476303084763a55      0t0  UDP *:55248
zoom.us   <span style="color:#ae81ff">53231</span> mvdbent   68u  IPv4 0x647630307bd37d3d      0t0  UDP *:53574

Usage:
		-a		causes list selection options to be ANDed, as described above.
		
		-n		inhibits the conversion of network numbers to host  names  <span style="color:#66d9ef">for</span>
				network  files.   Inhibiting  conversion  may  make  lsof  run
				faster.  It is also useful when host name lookup is not  working properly.
				
		-P		inhibits the conversion of port numbers to port names <span style="color:#66d9ef">for</span> network files.
				Inhibiting  the  conversion may make lsof run a little faster. 
				It is also useful when port name lookup is not working properly.

		-i 		selects  the  listing  of  files any of whose Internet address 
				matches the address specified in i.  If no address  is  specified, 
				this option selects the listing of all Internet and x.25
				<span style="color:#f92672">(</span>HP-UX<span style="color:#f92672">)</span> network files
				
		<span style="color:#ae81ff">46</span> 		specifies the IP version, IPv4 or IPv6 that applies to the following address.
				<span style="color:#e6db74">&#39;6&#39;</span> may be be specified only <span style="color:#66d9ef">if</span> the UNIX dialect supports IPv6.
				If neither <span style="color:#e6db74">&#39;4&#39;</span> nor <span style="color:#e6db74">&#39;6&#39;</span> is specified, the following address applies to all IP versions.
				
		sTCP	To list only network files with TCP state LISTEN, use: -sTCP:LISTEN
</code></pre></div><p>Fun fact is that beside of zoom.us, Microsoft Teams, Cisco WebEx, Slack and FaceTime is also using TCP state LISTEN.
Only Microsoft Teams connected this to your localIP</p>
<p><em>Example</em></p>
<div class="highlight"><pre tabindex="0" style="color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4"><code class="language-bash" data-lang="bash">lsof -anP -i4 -sTCP:LISTEN | grep Microsoft | grep 10.0.1.116:<span style="color:#e6db74">&#39;*&#39;</span>
Microsoft <span style="color:#ae81ff">67439</span> mvdbent   45u  IPv4 0x647644287bdb076d      0t0  UDP 10.0.1.116:50023
</code></pre></div><p>This script will look for zoom.us, Microsoft Teams, Cisco WebEx, Slack and FaceTime online sessions.
Want to have</p>
<h2 id="create-an-automator-app-that-loops-this-script">Create an Automator app that loops this script.</h2>
<p>Now we have a script that scans locally for any running meetings, so we need to create an easy way to start and stop this process.</p>
<p>For this version we will use the <em>Apple Automator.app</em> to create an application.</p>
<p>Create a <code>New Document</code> and choose type <code>Application</code></p>
<ul>
<li>Add Action <code>Run Shell Script</code></li>
<li>Copy the contents of <code>autorunscript.sh</code> and paste this into the <code>Run Shell Script</code> input field.</li>
<li>Add an other Action <code>Loop</code>.</li>
<li>Change <code>Ask to continue</code> to <code>Loop automatically</code> and Stop after 480 Minutes (8 hours)</li>
<li>Save the Application to your preferred location, you can add this to your <code>Dock</code> where you can easy start the App, or add the App to the <code>Login Items</code> to open automatically.</li>
</ul>
<p>If you want to stop/quit the App, in the menubar click on on the spinning gear icon, behind the status, App name (Loop), you can click the X to quit the App.</p>
]]></content>
        </item>
        
        <item>
            <title>Off-boarding in a Modern Deployment | JNUC 2019</title>
            <link>/posts/2019/11/off-boarding-in-a-modern-deployment-jnuc-2019/</link>
            <pubDate>Mon, 25 Nov 2019 00:00:00 +0000</pubDate>
            
            <guid>/posts/2019/11/off-boarding-in-a-modern-deployment-jnuc-2019/</guid>
            <description>Imaging is dead. Secure Boot and the T2 system controller have changed the toolset available to Mac administrators. The new post-imaging world of Mojave requires new workflows. We learn about the role that &amp;lsquo;off-boarding&amp;rsquo; or the erase/install step has in the modern macOS deployment cycle. In this session, we will explore the startosinstall command in detail and learn about its uses and limitations. Finally, we will introduce a few workflows and tools (Erase&amp;amp;Install.</description>
            <content type="html"><![CDATA[
    <img src="https://bytebucket.org/prowarehouse-nl/erase-install/raw/e2538d9e567230fe3d1829cb0b1f006c65c51b6d/readMe_images/icon_512x512.png"  class="center"  style="border-radius: 8px; height: 300px;"  />


<p>Imaging is dead. Secure Boot and the T2 system controller have changed the toolset available to Mac administrators. The new post-imaging world of Mojave requires new workflows. We learn about the role that &lsquo;off-boarding&rsquo; or the erase/install step has in the modern macOS deployment cycle. In this session, we will explore the startosinstall command in detail and learn about its uses and limitations. Finally, we will introduce a few workflows and tools (Erase&amp;Install.app) that you can use to quickly offboard or reset your Macs.</p>
<p>Notes and links for my <strong>“Off-boarding in a Modern Deployment”</strong> presentation at <strong>Jamf Nation User Conference 2019</strong> in Minneapolis.</p>
<p><strong>Presentation Slides</strong> <a href="https://www.icloud.com/keynote/07saziluVbQoVr4sRaANOONTQ#JNUC2019"><em>iCloud</em></a>, <a href="https://speakerdeck.com/jamf/off-boarding-in-a-modern-deployment"><em>SpeakerDeck</em></a>, <a href="https://speakerd.s3.amazonaws.com/presentations/fe20a8d4e9a24a75aa96c7e5f26f9fa6/Off_Boarding_in_a_Modern_Deployment.pdf"><em>PDF</em></a></p>
<p><strong>Presentation Video</strong> <a href="https://www.jamf.com/resources/videos/offboarding-in-a-modern-deployment-workflow/"><em>on Jamf.com</em></a></p>
<h2 id="tools">Tools</h2>
<ul>
<li>
<p><a href="https://bitbucket.org/prowarehouse-nl/erase-install/src/master/"><em>Erase &amp; Install Application</em></a> (<a href="https://scriptingosx.com/2018/10/eraseinstall-application/"><em>Blog</em></a>)</p>
</li>
<li>
<p><em>#eraseinstall on</em> <a href="http://macadmins.org/"><em>MacAdmins Slack</em></a></p>
</li>
<li>
<p><a href="https://www.jamf.com/blog/reinstall-a-clean-macos-with-one-button/"><em>Reinstall a clean macOS with one button by Bill Smith</em></a></p>
</li>
<li>
<p><a href="https://grahamrpugh.com/2018/03/26/reinstall-macos-from-system-volume.html"><em>erase-install by Graham Pugh</em></a> (<a href="https://grahamrpugh.com/2018/03/26/reinstall-macos-from-system-volume.html"><em>Blog</em></a>, <a href="https://github.com/grahampugh/erase-install"><em>Github</em></a>)</p>
</li>
<li>
<p><a href="https://twocanoes.com/products/mac/mac-deploy-stick/"><em>MDS by Twocanoes</em></a></p>
</li>
</ul>
<h2 id="resources">Resources</h2>
<ul>
<li>
<p><a href="https://scriptingosx.com/swift/"><em>Swift for Apple Admins</em></a></p>
</li>
<li>
<p><a href="https://podcast.macadmins.org/2018/11/12/episode-102-erase-all-the-things-with-armin-briegel/"><em>MacAdmins Podcast: Erase all the Things with Armin Briegel</em></a></p>
</li>
</ul>
<h2 id="apple-links">Apple Links</h2>
<p><a href="https://support.apple.com/en-gb/HT207305"><em>Availability of Apple programs and payment methods for education and business</em></a></p>
<p><a href="https://developer.apple.com/design/human-interface-guidelines/macos/overview/themes/"><em>Human Interface Guidelines</em></a></p>
<h2 id="more-links">More links</h2>
<ul>
<li>
<p><a href="https://github.com/munki/installr/"><em>installr from Greg Neagle</em></a></p>
</li>
<li>
<p><a href="https://krypted.com/mac-os-x/device-snapshots-and-crafting-a-restore-device-user-experience-for-macs/"><em>Device Snapshots and Crafting A Restore Device User Experience for Macs – Charles Edge</em></a></p>
</li>
</ul>
]]></content>
        </item>
        
        <item>
            <title>Automation Panel | JNUC 2018</title>
            <link>/posts/2018/10/automation-panel-jnuc-2018/</link>
            <pubDate>Wed, 24 Oct 2018 00:00:00 +0000</pubDate>
            
            <guid>/posts/2018/10/automation-panel-jnuc-2018/</guid>
            <description>In this JNUC session, we talk through some of the details of automating various components of your Apple environment.
How to automate your &amp;ldquo;favorite&amp;rdquo; workflows. Let’s face it — one of the main reasons many people come to the Jamf Nation User Conference (JNUC) is to automate the crap out of their environment and have it run like a well-oiled machine. In this panel, we talk through some of the details of automating various components of your Apple environment, including Jamf.</description>
            <content type="html"><![CDATA[
    <img src="/img/jnuc18_2.png"  class="center"  style="border-radius: 8px;"  />


<p>In this <a href="https://www.jamf.com/resources/videos/automation-panel/"><strong>JNUC session</strong></a>, we talk through some of the details of automating various components of your Apple environment.</p>
<h3 id="how-to-automate-your-favorite-workflows">How to automate your &ldquo;favorite&rdquo; workflows.</h3>
<p>Let’s face it — one of the main reasons many people come to the Jamf Nation User Conference (JNUC) is to automate the crap out of their environment and have it run like a well-oiled machine. In this panel, we talk through some of the details of automating various components of your Apple environment, including Jamf.</p>
]]></content>
        </item>
        
    </channel>
</rss>
